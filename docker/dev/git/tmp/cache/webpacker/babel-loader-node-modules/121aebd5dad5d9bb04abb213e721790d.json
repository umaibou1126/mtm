{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nvar API_URL = 'http://localhost:3000';\nvar securedAxiosInstance = axios.create({\n  baseURL: API_URL,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nvar plainAxiosInstance = axios.create({\n  baseURL: API_URL,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nsecuredAxiosInstance.interceptors.request.use(function (config) {\n  var method = config.method.toUpperCase();\n\n  if (method !== 'OPTIONS' && method !== 'GET') {\n    config.headers = _objectSpread(_objectSpread({}, config.headers), {}, {\n      'X-CSRF-TOKEN': localStorage.csrf\n    });\n  }\n\n  return config;\n});\nsecuredAxiosInstance.interceptors.response.use(null, function (error) {\n  if (error.response && error.response.config && error.response.status === 401) {\n    // If 401 by expired access cookie, we do a refresh request\n    return plainAxiosInstance.post('/api/v1/refresh', {}, {\n      headers: {\n        'X-CSRF-TOKEN': localStorage.csrf\n      }\n    }).then(function (response) {\n      localStorage.csrf = response.data.csrf;\n      localStorage.signedIn = true; // After another successfull refresh - repeat original request\n\n      var retryConfig = error.response.config;\n      retryConfig.headers['X-CSRF-TOKEN'] = localStorage.csrf;\n      return plainAxiosInstance.request(retryConfig);\n    })[\"catch\"](function (error) {\n      delete localStorage.csrf;\n      delete localStorage.signedIn; // redirect to signin if refresh fails\n\n      location.replace('/');\n      return Promise.reject(error);\n    });\n  } else {\n    return Promise.reject(error);\n  }\n});\nexport { securedAxiosInstance, plainAxiosInstance };","map":{"version":3,"sources":["/app/app/javascript/backend/axios/axios.js"],"names":["axios","API_URL","securedAxiosInstance","create","baseURL","withCredentials","headers","plainAxiosInstance","interceptors","request","use","config","method","toUpperCase","localStorage","csrf","response","error","status","post","then","data","signedIn","retryConfig","location","replace","Promise","reject"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,OAAO,GAAG,uBAAhB;AAEA,IAAMC,oBAAoB,GAAGF,KAAK,CAACG,MAAN,CAAa;AACtCC,EAAAA,OAAO,EAAEH,OAD6B;AAEtCI,EAAAA,eAAe,EAAE,IAFqB;AAGtCC,EAAAA,OAAO,EAAE;AACL,oBAAgB;AADX;AAH6B,CAAb,CAA7B;AAQA,IAAMC,kBAAkB,GAAGP,KAAK,CAACG,MAAN,CAAa;AACpCC,EAAAA,OAAO,EAAEH,OAD2B;AAEpCI,EAAAA,eAAe,EAAE,IAFmB;AAGpCC,EAAAA,OAAO,EAAE;AACL,oBAAgB;AADX;AAH2B,CAAb,CAA3B;AAQAJ,oBAAoB,CAACM,YAArB,CAAkCC,OAAlC,CAA0CC,GAA1C,CAA8C,UAAAC,MAAM,EAAI;AACpD,MAAMC,MAAM,GAAGD,MAAM,CAACC,MAAP,CAAcC,WAAd,EAAf;;AACA,MAAID,MAAM,KAAK,SAAX,IAAwBA,MAAM,KAAK,KAAvC,EAA8C;AAC1CD,IAAAA,MAAM,CAACL,OAAP,mCACOK,MAAM,CAACL,OADd;AAEI,sBAAgBQ,YAAY,CAACC;AAFjC;AAIH;;AACD,SAAOJ,MAAP;AACH,CATD;AAWAT,oBAAoB,CAACM,YAArB,CAAkCQ,QAAlC,CAA2CN,GAA3C,CAA+C,IAA/C,EAAqD,UAAAO,KAAK,EAAI;AAC1D,MAAIA,KAAK,CAACD,QAAN,IAAkBC,KAAK,CAACD,QAAN,CAAeL,MAAjC,IAA2CM,KAAK,CAACD,QAAN,CAAeE,MAAf,KAA0B,GAAzE,EAA8E;AAC1E;AACA,WAAOX,kBAAkB,CAACY,IAAnB,CAAwB,iBAAxB,EAA2C,EAA3C,EAA+C;AAAEb,MAAAA,OAAO,EAAE;AAAE,wBAAgBQ,YAAY,CAACC;AAA/B;AAAX,KAA/C,EACFK,IADE,CACG,UAAAJ,QAAQ,EAAI;AACdF,MAAAA,YAAY,CAACC,IAAb,GAAoBC,QAAQ,CAACK,IAAT,CAAcN,IAAlC;AACAD,MAAAA,YAAY,CAACQ,QAAb,GAAwB,IAAxB,CAFc,CAGd;;AACA,UAAIC,WAAW,GAAGN,KAAK,CAACD,QAAN,CAAeL,MAAjC;AACAY,MAAAA,WAAW,CAACjB,OAAZ,CAAoB,cAApB,IAAsCQ,YAAY,CAACC,IAAnD;AACA,aAAOR,kBAAkB,CAACE,OAAnB,CAA2Bc,WAA3B,CAAP;AACH,KARE,WAQM,UAAAN,KAAK,EAAI;AACd,aAAOH,YAAY,CAACC,IAApB;AACA,aAAOD,YAAY,CAACQ,QAApB,CAFc,CAGd;;AACAE,MAAAA,QAAQ,CAACC,OAAT,CAAiB,GAAjB;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeV,KAAf,CAAP;AACH,KAdE,CAAP;AAeH,GAjBD,MAiBO;AACH,WAAOS,OAAO,CAACC,MAAR,CAAeV,KAAf,CAAP;AACH;AACJ,CArBD;AAuBA,SAASf,oBAAT,EAA+BK,kBAA/B","sourcesContent":["import axios from 'axios'\n\nconst API_URL = 'http://localhost:3000'\n\nconst securedAxiosInstance = axios.create({\n    baseURL: API_URL,\n    withCredentials: true,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n})\n\nconst plainAxiosInstance = axios.create({\n    baseURL: API_URL,\n    withCredentials: true,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n})\n\nsecuredAxiosInstance.interceptors.request.use(config => {\n    const method = config.method.toUpperCase()\n    if (method !== 'OPTIONS' && method !== 'GET') {\n        config.headers = {\n            ...config.headers,\n            'X-CSRF-TOKEN': localStorage.csrf\n        }\n    }\n    return config\n})\n\nsecuredAxiosInstance.interceptors.response.use(null, error => {\n    if (error.response && error.response.config && error.response.status === 401) {\n        // If 401 by expired access cookie, we do a refresh request\n        return plainAxiosInstance.post('/api/v1/refresh', {}, { headers: { 'X-CSRF-TOKEN': localStorage.csrf } })\n            .then(response => {\n                localStorage.csrf = response.data.csrf\n                localStorage.signedIn = true\n                // After another successfull refresh - repeat original request\n                let retryConfig = error.response.config\n                retryConfig.headers['X-CSRF-TOKEN'] = localStorage.csrf\n                return plainAxiosInstance.request(retryConfig)\n            }).catch(error => {\n                delete localStorage.csrf\n                delete localStorage.signedIn\n                // redirect to signin if refresh fails\n                location.replace('/')\n                return Promise.reject(error)\n            })\n    } else {\n        return Promise.reject(error)\n    }\n})\n\nexport { securedAxiosInstance, plainAxiosInstance }\n"]},"metadata":{},"sourceType":"module"}